{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport * as Stomp from 'stompjs'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  var url = 'http://localhost:8081/actions';\n  var options = {};\n  var sockjs = new SockJS(url,\n  /*_reserved*/\n  null, options);\n\n  sockjs.onopen = function () {\n    console.log('open'); //sock.send('test');\n\n    sockjs.send(JSON.stringify({\n      name: 'Test User',\n      message: 'This is a hard-coded test'\n    })); //sockjs.close();\n  };\n  /*  NB: Moved into App\n  sockjs.onmessage = function(e) {\n      console.log('message', e.data);\n  }; //*/\n\n\n  sockjs.onclose = function () {\n    console.log('close');\n  }; //\n  // clientSocket.onopen = function(e) {\n  //     console.log(\"[open] WebSocket connection established\");\n  // };\n  //\n  // clientSocket.onmessage = function(event) {\n  //     alert(`Data received from server: ${event.data}`);\n  // };\n  //\n  // clientSocket.onclose = function(event) {\n  //     if (event.wasClean) {\n  //         alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n  //     } else {\n  //\n  //         alert('[close] Connection interrupted');\n  //     }\n  // };\n  //\n  // clientSocket.onerror = function(error) {\n  //     alert(`[error] ${error.message}`);\n  // };\n\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","ConversationList","MessageList","w3cwebsocket","W3CWebSocket","SockJS","Stomp","Messenger","props","url","options","sockjs","onopen","console","log","send","JSON","stringify","name","message","onclose"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAO,iBAAP;AACA,SAASC,YAAY,IAAIC,YAAzB,QAA6C,WAA7C;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB,C,CAEA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAErC,MAAIC,GAAG,GAAG,+BAAV;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG,IAAIN,MAAJ,CAAWI,GAAX;AAAgB;AAAa,MAA7B,EAAmCC,OAAnC,CAAb;;AAEAC,EAAAA,MAAM,CAACC,MAAP,GAAgB,YAAW;AACvBC,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EADuB,CAGvB;;AACAH,IAAAA,MAAM,CAACI,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,IAAI,EAAE,WAAR;AAAqBC,MAAAA,OAAO,EAAE;AAA9B,KAAf,CAAZ,EAJuB,CAKvB;AACH,GAND;AAOA;;;;;;AAIAR,EAAAA,MAAM,CAACS,OAAP,GAAiB,YAAW;AACxBP,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAFD,CAjBqC,CAqBrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArBF,EAyBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzBF,CADF;AA+BH","sourcesContent":["import React from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport * as Stomp from 'stompjs';\n\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    let url = 'http://localhost:8081/actions';\n    let options = {};\n    let sockjs = new SockJS(url, /*_reserved*/null, options);\n\n    sockjs.onopen = function() {\n        console.log('open');\n\n        //sock.send('test');\n        sockjs.send(JSON.stringify({ name: 'Test User', message: 'This is a hard-coded test'}));\n        //sockjs.close();\n    };\n    /*  NB: Moved into App\n    sockjs.onmessage = function(e) {\n        console.log('message', e.data);\n    }; //*/\n    sockjs.onclose = function() {\n        console.log('close');\n    };\n\n    //\n    // clientSocket.onopen = function(e) {\n    //     console.log(\"[open] WebSocket connection established\");\n    // };\n    //\n    // clientSocket.onmessage = function(event) {\n    //     alert(`Data received from server: ${event.data}`);\n    // };\n    //\n    // clientSocket.onclose = function(event) {\n    //     if (event.wasClean) {\n    //         alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n    //     } else {\n    //\n    //         alert('[close] Connection interrupted');\n    //     }\n    // };\n    //\n    // clientSocket.onerror = function(error) {\n    //     alert(`[error] ${error.message}`);\n    // };\n\n    return (\n      <div className=\"messenger\">\n\n          {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable sidebar\">\n          <ConversationList />\n        </div>\n\n        <div className=\"scrollable content\">\n          <MessageList/>\n        </div>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}