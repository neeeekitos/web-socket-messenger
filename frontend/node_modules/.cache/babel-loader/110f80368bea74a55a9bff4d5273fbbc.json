{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  // let url = 'http://localhost:8081/stomp';\n  // let options = {};\n  // let sockjs = new SockJS(url, /*_reserved*/null, options);\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allUsers = _useState2[0],\n      setAllUsers = _useState2[1];\n\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n            _context.next = 3;\n            return axios.get(\"http://localhost:8081/actions/allUsers\");\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    // let socket = new SockJS(url);\n    // clientStomp = webstomp.over(new SockJS(url, {heartbeat: false}));\n    //\n    // clientStomp.connect({}, onConnected, console.log(\"oouuups\"));\n    var client = new Client();\n    client.configure({\n      brokerURL: 'ws://localhost:8081/stomp',\n      onConnect: function onConnect() {\n        console.log('onConnect');\n        client.subscribe('/topic/public', function (message) {\n          console.log(\"from subscription\");\n\n          if (message.body) {\n            setAllUsers(JSON.parse(message.body).users);\n            console.log(allUsers);\n          } else {\n            console.log(\"got empty message\");\n          }\n        });\n      },\n      // Helps during debugging, remove in production\n      debug: function debug(str) {\n        console.log(new Date(), str);\n      }\n    });\n    client.activate();\n  };\n\n  var onTestReceived = function onTestReceived(payload) {\n    console.log(\"test received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onMessagesReceived = function onMessagesReceived(payload) {\n    console.log(\"messages received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onChatsReceived = function onChatsReceived(payload) {\n    console.log(\"chats received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onUsersReceived = function onUsersReceived(payload) {\n    console.log(\"users received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    allUsers: allUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","useState","ConversationList","MessageList","w3cwebsocket","W3CWebSocket","SockJS","webstomp","Client","Messenger","props","allUsers","setAllUsers","connect","axios","get","client","configure","brokerURL","onConnect","console","log","subscribe","message","body","JSON","parse","users","debug","str","Date","activate","onTestReceived","payload","onMessagesReceived","onChatsReceived","onUsersReceived"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs';\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    // let url = 'http://localhost:8081/stomp';\n    // let options = {};\n    // let sockjs = new SockJS(url, /*_reserved*/null, options);\n    // let clientStomp;\n    const [allUsers, setAllUsers] = useState([]);\n\n\n    useEffect(async () => {\n        connect();\n        await axios.get(\"http://localhost:8081/actions/allUsers\");\n    },[])\n\n    const connect = () => {\n\n        // let socket = new SockJS(url);\n        // clientStomp = webstomp.over(new SockJS(url, {heartbeat: false}));\n        //\n        // clientStomp.connect({}, onConnected, console.log(\"oouuups\"));\n        let client = new Client();\n\n        client.configure({\n            brokerURL: 'ws://localhost:8081/stomp',\n            onConnect: () => {\n                console.log('onConnect');\n\n                client.subscribe('/topic/public', message => {\n                    console.log(\"from subscription\");\n                    if (message.body) {\n                        setAllUsers(JSON.parse(message.body).users);\n                        console.log(allUsers);\n                    } else {\n                        console.log(\"got empty message\");\n                    }\n                });\n\n            },\n            // Helps during debugging, remove in production\n            debug: (str) => {\n                console.log(new Date(), str);\n            }\n        });\n\n        client.activate();\n    }\n\n    const onTestReceived = (payload) => {\n        console.log(\"test received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onMessagesReceived = (payload) => {\n        console.log(\"messages received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onChatsReceived = (payload) => {\n        console.log(\"chats received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onUsersReceived = (payload) => {\n        console.log(\"users received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n\n\n    return (\n        <div className=\"messenger\">\n\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            <div className=\"scrollable sidebar\">\n              <ConversationList allUsers={allUsers}/>\n            </div>\n\n            <div className=\"scrollable content\">\n              <MessageList/>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}