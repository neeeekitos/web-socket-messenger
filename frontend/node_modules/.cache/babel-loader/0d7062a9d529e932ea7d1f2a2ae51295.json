{"ast":null,"code":"import _toConsumableArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/ConversationList/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport axios from 'axios';\nimport './ConversationList.css';\nimport AddChat from \"./AddChat\";\nexport default function ConversationList(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      conversations = _useState2[0],\n      setConversations = _useState2[1];\n\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getChats();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var getConversations = function getConversations() {\n    axios.get('https://randomuser.me/api/?results=20').then(function (response) {\n      var newConversations = response.data.results.map(function (result) {\n        return {\n          photo: result.picture.large,\n          name: \"\".concat(result.name.first, \" \").concat(result.name.last),\n          text: 'Hello world! This is a long message that needs to be truncated.'\n        };\n      });\n      setConversations([].concat(_toConsumableArray(conversations), _toConsumableArray(newConversations)));\n    });\n  };\n\n  var getChats =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var response, responseArray, conversationsNumber, responseImagers, newConversations;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios.get('http://localhost:8081/actions/allUserChats');\n\n            case 2:\n              response = _context2.sent;\n              responseArray = Object.values(response.data);\n              console.log(responseArray);\n              conversationsNumber = responseArray.length;\n              console.log(\"fetching images for \".concat(conversationsNumber, \" conversations.\"));\n              _context2.next = 9;\n              return axios.get(\"https://randomuser.me/api/?results=\".concat(conversationsNumber));\n\n            case 9:\n              responseImagers = _context2.sent;\n              newConversations = response.data.map(function (result, index) {\n                return {\n                  photo: response.data.results[index].picture.large,\n                  name: \"\".concat(result.groupName),\n                  text: 'Hello world! This is a long message that needs to be truncated.'\n                };\n              });\n              setConversations([].concat(_toConsumableArray(conversations), _toConsumableArray(newConversations)));\n              console.log(response);\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function getChats() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var createChat =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(isGroup, name) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log('creating chat...');\n              console.log(isGroup);\n              console.log(name);\n\n              if (!isGroup) {\n                _context3.next = 9;\n                break;\n              }\n\n              _context3.next = 6;\n              return axios.post('http://localhost:8080/actions/createGroup', name, {\n                headers: {\n                  'Content-Type': 'text/plain'\n                }\n              });\n\n            case 6:\n              response = _context3.sent;\n              _context3.next = 12;\n              break;\n\n            case 9:\n              _context3.next = 11;\n              return axios.post('http://localhost:8080/actions/createChat', name, {\n                headers: {\n                  'Content-Type': 'text/plain'\n                }\n              });\n\n            case 11:\n              response = _context3.sent;\n\n            case 12:\n              console.log(response.data, response.status);\n              alert(\"Server response : \".concat(response.data));\n              console.log(response);\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function createChat(_x, _x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(\"div\", {\n    className: \"conversation-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    title: \"Messenger\",\n    leftItems: [React.createElement(ToolbarButton, {\n      key: \"cog\",\n      onClick: function onClick() {\n        return console.log(\"properties open\");\n      },\n      icon: \"ion-ios-cog\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })],\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"add\",\n      icon: \"ion-ios-add-circle-outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(AddChat, {\n    createChat: createChat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), React.createElement(ConversationSearch, {\n    onclick: function onclick() {\n      return console.log(\"search\");\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }), conversations.map(function (conversation) {\n    return React.createElement(ConversationListItem, {\n      key: conversation.name,\n      data: conversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    });\n  }));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/ConversationList/index.js"],"names":["React","useState","useEffect","ConversationSearch","ConversationListItem","Toolbar","ToolbarButton","axios","AddChat","ConversationList","props","conversations","setConversations","getChats","getConversations","get","then","response","newConversations","data","results","map","result","photo","picture","large","name","first","last","text","responseArray","Object","values","console","log","conversationsNumber","length","responseImagers","index","groupName","createChat","isGroup","post","headers","status","alert","conversation"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport ConversationSearch from '../ConversationSearch';\nimport ConversationListItem from '../ConversationListItem';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport axios from 'axios';\n\nimport './ConversationList.css';\nimport AddChat from \"./AddChat\";\n\nexport default function ConversationList(props) {\n  const [conversations, setConversations] = useState([]);\n  useEffect(async () => {\n    await getChats()\n  },[])\n\n const getConversations = () => {\n    axios.get('https://randomuser.me/api/?results=20').then(response => {\n        let newConversations = response.data.results.map(result => {\n          return {\n            photo: result.picture.large,\n            name: `${result.name.first} ${result.name.last}`,\n            text: 'Hello world! This is a long message that needs to be truncated.'\n          };\n        });\n        setConversations([...conversations, ...newConversations])\n    });\n  }\n\n  const getChats = async () => {\n      const response = await axios.get('http://localhost:8081/actions/allUserChats');\n      const responseArray = Object.values(response.data);\n        console.log(responseArray);\n      const conversationsNumber = responseArray.length;\n      console.log(`fetching images for ${conversationsNumber} conversations.`);\n\n      const responseImagers = await axios.get(`https://randomuser.me/api/?results=${conversationsNumber}`);\n\n      let newConversations = response.data.map((result, index) => {\n          return {\n              photo: response.data.results[index].picture.large,\n              name: `${result.groupName}`,\n              text: 'Hello world! This is a long message that needs to be truncated.'\n          };\n      });\n      setConversations([...conversations, ...newConversations])\n      console.log(response);\n  }\n\n  const createChat = async (isGroup, name) => {\n\n      console.log('creating chat...')\n      console.log(isGroup)\n      console.log(name)\n      let response;\n      if (isGroup)\n        response = await axios.post('http://localhost:8080/actions/createGroup', name,\n            {\n                headers: {\n                    'Content-Type': 'text/plain',\n                }\n            });\n      else\n        response = await axios.post('http://localhost:8080/actions/createChat', name,\n            {\n                headers: {\n                    'Content-Type': 'text/plain',\n                }\n            });\n\n      console.log(response.data, response.status);\n      alert(`Server response : ${response.data}`);\n      console.log(response);\n  }\n\n    return (\n      <div className=\"conversation-list\" >\n        <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" onClick={() => console.log(\"properties open\")} icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\"   icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        />\n          <AddChat createChat={createChat}/>\n        <ConversationSearch onclick={() => console.log(\"search\")}  />\n        {\n          conversations.map(conversation =>\n            <ConversationListItem\n              key={conversation.name}\n              data={conversation}\n            />\n          )\n        }\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}