{"ast":null,"code":"import _classCallCheck from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { Client } from '../client';\nimport { HeartbeatInfo } from './heartbeat-info';\n/**\n * Available for backward compatibility, please shift to using {@link Client}.\n *\n * **Deprecated**\n *\n * Part of `@stomp/stompjs`.\n *\n * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n */\n\nexport var CompatClient =\n/*#__PURE__*/\nfunction (_Client) {\n  _inherits(CompatClient, _Client);\n\n  /**\n   * Available for backward compatibility, please shift to using {@link Client}\n   * and [Client#webSocketFactory]{@link Client#webSocketFactory}.\n   *\n   * **Deprecated**\n   *\n   * @internal\n   */\n  function CompatClient(webSocketFactory) {\n    var _this;\n\n    _classCallCheck(this, CompatClient);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CompatClient).call(this));\n    /**\n     * It is no op now. No longer needed. Large packets work out of the box.\n     */\n\n    _this.maxWebSocketFrameSize = 16 * 1024;\n    _this._heartbeatInfo = new HeartbeatInfo(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.reconnect_delay = 0;\n    _this.webSocketFactory = webSocketFactory; // Default from previous version\n\n    _this.debug = function () {\n      var _console;\n\n      (_console = console).log.apply(_console, arguments);\n    };\n\n    return _this;\n  }\n\n  _createClass(CompatClient, [{\n    key: \"_parseConnect\",\n    value: function _parseConnect() {\n      var closeEventCallback;\n      var connectCallback;\n      var errorCallback;\n      var headers = {};\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (args.length < 2) {\n        throw new Error('Connect requires at least 2 arguments');\n      }\n\n      if (typeof args[1] === 'function') {\n        headers = args[0];\n        connectCallback = args[1];\n        errorCallback = args[2];\n        closeEventCallback = args[3];\n      } else {\n        switch (args.length) {\n          case 6:\n            headers.login = args[0];\n            headers.passcode = args[1];\n            connectCallback = args[2];\n            errorCallback = args[3];\n            closeEventCallback = args[4];\n            headers.host = args[5];\n            break;\n\n          default:\n            headers.login = args[0];\n            headers.passcode = args[1];\n            connectCallback = args[2];\n            errorCallback = args[3];\n            closeEventCallback = args[4];\n        }\n      }\n\n      return [headers, connectCallback, errorCallback, closeEventCallback];\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#activate]{@link Client#activate}.\n     *\n     * **Deprecated**\n     *\n     * The `connect` method accepts different number of arguments and types. See the Overloads list. Use the\n     * version with headers to pass your broker specific options.\n     *\n     * overloads:\n     * - connect(headers, connectCallback)\n     * - connect(headers, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback)\n     * - connect(login, passcode, connectCallback, errorCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback)\n     * - connect(login, passcode, connectCallback, errorCallback, closeEventCallback, host)\n     *\n     * params:\n     * - headers, see [Client#connectHeaders]{@link Client#connectHeaders}\n     * - connectCallback, see [Client#onConnect]{@link Client#onConnect}\n     * - errorCallback, see [Client#onStompError]{@link Client#onStompError}\n     * - closeEventCallback, see [Client#onWebSocketClose]{@link Client#onWebSocketClose}\n     * - login [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - passcode [String], [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     * - host [String], see [Client#connectHeaders](../classes/Client.html#connectHeaders)\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var out = this._parseConnect.apply(this, arguments);\n\n      if (out[0]) {\n        this.connectHeaders = out[0];\n      }\n\n      if (out[1]) {\n        this.onConnect = out[1];\n      }\n\n      if (out[2]) {\n        this.onStompError = out[2];\n      }\n\n      if (out[3]) {\n        this.onWebSocketClose = out[3];\n      }\n\n      _get(_getPrototypeOf(CompatClient.prototype), \"activate\", this).call(this);\n    }\n    /**\n     * Available for backward compatibility, please shift to using [Client#deactivate]{@link Client#deactivate}.\n     *\n     * **Deprecated**\n     *\n     * See:\n     * [Client#onDisconnect]{@link Client#onDisconnect}, and\n     * [Client#disconnectHeaders]{@link Client#disconnectHeaders}\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(disconnectCallback) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (disconnectCallback) {\n        this.onDisconnect = disconnectCallback;\n      }\n\n      this.disconnectHeaders = headers;\n\n      _get(_getPrototypeOf(CompatClient.prototype), \"deactivate\", this).call(this);\n    }\n    /**\n     * Available for backward compatibility, use [Client#publish]{@link Client#publish}.\n     *\n     * Send a message to a named destination. Refer to your STOMP broker documentation for types\n     * and naming of destinations. The headers will, typically, be available to the subscriber.\n     * However, there may be special purpose headers corresponding to your STOMP broker.\n     *\n     *  **Deprecated**, use [Client#publish]{@link Client#publish}\n     *\n     * Note: Body must be String. You will need to covert the payload to string in case it is not string (e.g. JSON)\n     *\n     * ```javascript\n     *        client.send(\"/queue/test\", {priority: 9}, \"Hello, STOMP\");\n     *\n     *        // If you want to send a message with a body, you must also pass the headers argument.\n     *        client.send(\"/queue/test\", {}, \"Hello, STOMP\");\n     * ```\n     *\n     * To upgrade, please follow the [Upgrade Guide](../additional-documentation/upgrading.html)\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(destination) {\n      var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      headers = Object.assign({}, headers);\n      var skipContentLengthHeader = headers['content-length'] === false;\n\n      if (skipContentLengthHeader) {\n        delete headers['content-length'];\n      }\n\n      this.publish({\n        destination: destination,\n        headers: headers,\n        body: body,\n        skipContentLengthHeader: skipContentLengthHeader\n      });\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#reconnectDelay]{@link Client#reconnectDelay}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"reconnect_delay\",\n    set: function set(value) {\n      this.reconnectDelay = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#webSocket]{@link Client#webSocket}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"ws\",\n    get: function get() {\n      return this.webSocket;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#connectedVersion]{@link Client#connectedVersion}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"version\",\n    get: function get() {\n      return this.connectedVersion;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"onreceive\",\n    get: function get() {\n      return this.onUnhandledMessage;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\n     *\n     * **Deprecated**\n     */\n    ,\n    set: function set(value) {\n      this.onUnhandledMessage = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"onreceipt\",\n    get: function get() {\n      return this.onUnhandledReceipt;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\n     *\n     * **Deprecated**\n     */\n    ,\n    set: function set(value) {\n      this.onUnhandledReceipt = value;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n\n  }, {\n    key: \"heartbeat\",\n    get: function get() {\n      return this._heartbeatInfo;\n    }\n    /**\n     * Available for backward compatibility, renamed to [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}\n     * [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\n     *\n     * **Deprecated**\n     */\n    ,\n    set: function set(value) {\n      this.heartbeatIncoming = value.incoming;\n      this.heartbeatOutgoing = value.outgoing;\n    }\n  }]);\n\n  return CompatClient;\n}(Client);","map":null,"metadata":{},"sourceType":"module"}