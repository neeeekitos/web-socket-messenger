{"ast":null,"code":"import _toConsumableArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allUsers = _useState2[0],\n      setAllUsers = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chats = _useState4[0],\n      setChats = _useState4[1];\n\n  var _useState5 = useState(-1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentChatId = _useState6[0],\n      setCurrentChatId = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messages = _useState8[0],\n      setMessages = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      authenticated = _useState10[0],\n      setAuth = _useState10[1];\n\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    var client = new Client();\n    client.configure({\n      brokerURL: 'ws://localhost:8081/stomp',\n      onConnect: function () {\n        var _onConnect = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  console.log('onConnect');\n                  client.subscribe('/topic/public', function (message) {\n                    return onAllUsersReceived(message);\n                  });\n                  client.subscribe('/topic/chats', function (message) {\n                    return onAllChatsReceived(message);\n                  });\n                  client.subscribe('/topic/messages', function (message) {\n                    return onAllMessagesReceived(message);\n                  });\n                  client.subscribe('/topic/users', function (message) {\n                    return onAllUsersReceived(message);\n                  });\n                  client.subscribe('/topic/newMessage', function (message) {\n                    return onNewMessageReceived(message);\n                  });\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function onConnect() {\n          return _onConnect.apply(this, arguments);\n        }\n\n        return onConnect;\n      }(),\n      // Helps during debugging, remove in production\n      debug: function debug(str) {\n        console.log(new Date(), str);\n      }\n    });\n    client.activate();\n  };\n\n  var getMessagesByChatId = function getMessagesByChatId(chatId) {\n    axios.get(\"http://localhost:8081/messages/getMessagesByChatId?chatId=\".concat(chatId)).then(console.log);\n  };\n\n  var onAllUsersReceived = function onAllUsersReceived(message) {\n    console.log(\"Users subscription response :\");\n\n    if (message.body) {\n      var users = JSON.parse(message.body);\n      setAllUsers(users);\n      console.log(users);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var afterAuth =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get(\"http://localhost:8081/actions/allUserChats\");\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function afterAuth() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onAllChatsReceived = function onAllChatsReceived(message) {\n    console.log(\"Chats subscription response :\");\n\n    if (message.body) {\n      console.log(JSON.parse(message.body));\n      var chatsResponse = Object.values(JSON.parse(message.body));\n      setChats(chatsResponse);\n\n      if (chatsResponse.length > 0) {\n        setCurrentChatId(chatsResponse[0].chatId); // axios.get(`http://localhost:8081/messages/getMessagesByChatId?chatId=${currentChatId}`).then();\n      }\n\n      console.log(chatsResponse);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var onAllMessagesReceived =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(message) {\n      var msgsResponse, orderedMessages;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              console.log(\"Messages subscription response :\");\n\n              if (message.body) {\n                msgsResponse = Object.values(JSON.parse(message.body));\n                orderedMessages = msgsResponse.reverse().map(function (msg) {\n                  return processMessage(msg);\n                });\n                setMessages(orderedMessages);\n                console.log(msgsResponse);\n              } else {\n                console.log(\"got empty message\");\n              }\n\n            case 2:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function onAllMessagesReceived(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var onNewMessageReceived =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(message) {\n      var msgResponse;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              console.log(\"New message subscription response :\");\n\n              if (message.body) {\n                // console.log(JSON.parse(message.body))\n                msgResponse = Object.values(JSON.parse(message.body))[5];\n                console.log(\"messages : \" + messages);\n                setMessages(function (messages) {\n                  return [].concat(_toConsumableArray(messages), [processMessage(msgResponse)]);\n                });\n                console.log(JSON.stringify(messages));\n              } else {\n                console.log(\"got empty message\");\n              }\n\n            case 2:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function onNewMessageReceived(_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var processMessage = function processMessage(message) {\n    console.log(\"puto :\" + message);\n    return {\n      id: message.id,\n      author: message.sender.username,\n      message: message.text,\n      timestamp: new Date(message.time)\n    };\n  };\n\n  var onTestReceived = function onTestReceived(payload) {\n    console.log(\"test received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var sendMessage = function sendMessage(message) {\n    console.log(\"loooool : \" + message);\n    axios.post(\"http://localhost:8081/messages/sendMessage\", message, {\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      responseType: 'text'\n    }).then(console.log);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick:\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              setAuth(true);\n              _context6.next = 3;\n              return afterAuth();\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Authenticated?\"), React.createElement(ConversationList, {\n    getMessagesByChatId: getMessagesByChatId,\n    allUsers: allUsers,\n    chats: chats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    sendMessage: sendMessage,\n    messagesProp: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","useState","ConversationList","MessageList","axios","w3cwebsocket","W3CWebSocket","SockJS","webstomp","Client","Messenger","props","allUsers","setAllUsers","chats","setChats","currentChatId","setCurrentChatId","messages","setMessages","authenticated","setAuth","connect","client","configure","brokerURL","onConnect","console","log","subscribe","message","onAllUsersReceived","onAllChatsReceived","onAllMessagesReceived","onNewMessageReceived","debug","str","Date","activate","getMessagesByChatId","chatId","get","then","body","users","JSON","parse","afterAuth","chatsResponse","Object","values","length","msgsResponse","orderedMessages","reverse","map","msg","processMessage","msgResponse","stringify","id","author","sender","username","text","timestamp","time","onTestReceived","payload","sendMessage","post","headers","responseType"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs';\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    const [allUsers, setAllUsers] = useState([]);\n    const [chats, setChats] = useState([]);\n    const [currentChatId, setCurrentChatId] = useState(-1);\n    const [messages, setMessages] = useState([]);\n    const [authenticated, setAuth] = useState(false);\n\n\n    useEffect(async () => {\n        connect();\n    },[])\n\n    const connect = () => {\n\n        let client = new Client();\n\n        client.configure({\n            brokerURL: 'ws://localhost:8081/stomp',\n            onConnect: async () => {\n                console.log('onConnect');\n\n                client.subscribe('/topic/public', message => onAllUsersReceived(message));\n                client.subscribe('/topic/chats', message => onAllChatsReceived(message));\n                client.subscribe('/topic/messages', message => onAllMessagesReceived(message));\n                client.subscribe('/topic/users', message => onAllUsersReceived(message));\n                client.subscribe('/topic/newMessage', message => onNewMessageReceived(message));\n\n            },\n            // Helps during debugging, remove in production\n            debug: (str) => {\n                console.log(new Date(), str);\n            }\n        });\n\n        client.activate();\n    }\n\n    const getMessagesByChatId = (chatId) => {\n        axios.get(`http://localhost:8081/messages/getMessagesByChatId?chatId=${chatId}`).then(console.log);\n    }\n\n    const onAllUsersReceived = (message) => {\n        console.log(\"Users subscription response :\");\n        if (message.body) {\n            const users = JSON.parse(message.body);\n            setAllUsers(users);\n            console.log(users);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const afterAuth = async () => {\n        // await axios.get(\"http://localhost:8081/actions/allUsers\");\n        await axios.get(\"http://localhost:8081/actions/allUserChats\");\n    }\n\n    const onAllChatsReceived = (message) => {\n        console.log(\"Chats subscription response :\");\n        if (message.body) {\n            console.log(JSON.parse(message.body))\n            const chatsResponse = Object.values(JSON.parse(message.body));\n            setChats(chatsResponse);\n            if (chatsResponse.length > 0) {\n                setCurrentChatId(chatsResponse[0].chatId);\n                // axios.get(`http://localhost:8081/messages/getMessagesByChatId?chatId=${currentChatId}`).then();\n            }\n            console.log(chatsResponse);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onAllMessagesReceived = async (message) => {\n        console.log(\"Messages subscription response :\");\n        if (message.body) {\n            const msgsResponse = Object.values(JSON.parse(message.body));\n            const orderedMessages = msgsResponse.reverse().map(msg => processMessage(msg));\n            setMessages(orderedMessages);\n            console.log(msgsResponse);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onNewMessageReceived = async (message) => {\n        console.log(\"New message subscription response :\");\n        if (message.body) {\n            // console.log(JSON.parse(message.body))\n            const msgResponse = Object.values(JSON.parse(message.body))[5];\n            console.log(\"messages : \" + messages);\n\n            setMessages(messages => [...messages, processMessage(msgResponse)]);\n            console.log(JSON.stringify(messages))\n\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const processMessage = (message) => {\n        console.log(\"puto :\" + message)\n        return {\n            id: message.id,\n            author: message.sender.username,\n            message: message.text,\n            timestamp: new Date(message.time)\n        }\n    }\n\n    const onTestReceived = (payload) => {\n        console.log(\"test received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const sendMessage = (message) => {\n        console.log(\"loooool : \"+ message)\n        axios.post(\"http://localhost:8081/messages/sendMessage\", message, {\n            headers: {\n                'Content-Type': 'text/plain'\n            },\n            responseType: 'text'\n        }).then(console.log);\n    }\n\n\n    return (\n        <div className=\"messenger\">\n\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            <div className=\"scrollable sidebar\">\n                <button onClick={async () => {\n                    setAuth(true);\n                    await afterAuth();\n                }}>Authenticated?</button>\n\n                <ConversationList getMessagesByChatId={getMessagesByChatId} allUsers={allUsers} chats={chats}/>\n            </div>\n\n\n            <div className=\"scrollable content\">\n              <MessageList sendMessage={sendMessage} messagesProp={messages}/>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}