{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allUsers = _useState2[0],\n      setAllUsers = _useState2[1];\n\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n            _context.next = 3;\n            return axios.get(\"http://localhost:8081/actions/allUsers\");\n\n          case 3:\n            _context.next = 5;\n            return axios.get(\"http://localhost:8081/actions/allUserChats\");\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    var client = new Client();\n    client.configure({\n      brokerURL: 'ws://localhost:8081/stomp',\n      onConnect: function onConnect() {\n        console.log('onConnect');\n        client.subscribe('/topic/public', function (message) {\n          return onAllUsersReceived(message);\n        });\n        client.subscribe('/topic/chats', function (message) {\n          return onAllChatsReceived(message);\n        });\n        client.subscribe('/topic/messages', function (message) {\n          return onAllMessagesReceived(message);\n        });\n        client.subscribe('/topic/users', function (message) {\n          return onAllUsersReceived(message);\n        });\n      },\n      // Helps during debugging, remove in production\n      debug: function debug(str) {\n        console.log(new Date(), str);\n      }\n    });\n    client.activate();\n  };\n\n  var onAllUsersReceived = function onAllUsersReceived(users) {\n    console.log(\"Users subscription\");\n\n    if (message.body) {\n      var _users = JSON.parse(message.body).users;\n      setAllUsers(_users);\n      console.log(_users);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var onAllChatsReceived = function onAllChatsReceived(chats) {\n    console.log(\"Users subscription\");\n\n    if (message.body) {\n      console.log(JSON.parse(message.body));\n      var users = JSON.parse(message.body).users;\n      setAllUsers(users);\n      console.log(users);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var onAllMessagesReceived = function onAllMessagesReceived(messages) {};\n\n  var onNewMessageReceived = function onNewMessageReceived(message) {};\n\n  var onTestReceived = function onTestReceived(payload) {\n    console.log(\"test received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onMessagesReceived = function onMessagesReceived(payload) {\n    console.log(\"messages received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onChatsReceived = function onChatsReceived(payload) {\n    console.log(\"chats received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onUsersReceived = function onUsersReceived(payload) {\n    console.log(\"users received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    allUsers: allUsers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","useState","ConversationList","MessageList","axios","w3cwebsocket","W3CWebSocket","SockJS","webstomp","Client","Messenger","props","allUsers","setAllUsers","connect","get","client","configure","brokerURL","onConnect","console","log","subscribe","message","onAllUsersReceived","onAllChatsReceived","onAllMessagesReceived","debug","str","Date","activate","users","body","JSON","parse","chats","messages","onNewMessageReceived","onTestReceived","payload","onMessagesReceived","onChatsReceived","onUsersReceived"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs';\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    const [allUsers, setAllUsers] = useState([]);\n\n\n    useEffect(async () => {\n        connect();\n        await axios.get(\"http://localhost:8081/actions/allUsers\");\n        await axios.get(\"http://localhost:8081/actions/allUserChats\");\n    },[])\n\n    const connect = () => {\n\n        let client = new Client();\n\n        client.configure({\n            brokerURL: 'ws://localhost:8081/stomp',\n            onConnect: () => {\n                console.log('onConnect');\n\n                client.subscribe('/topic/public', message => onAllUsersReceived(message));\n                client.subscribe('/topic/chats', message => onAllChatsReceived(message));\n                client.subscribe('/topic/messages', message => onAllMessagesReceived(message));\n                client.subscribe('/topic/users', message => onAllUsersReceived(message));\n\n            },\n            // Helps during debugging, remove in production\n            debug: (str) => {\n                console.log(new Date(), str);\n            }\n        });\n\n        client.activate();\n    }\n\n    const onAllUsersReceived = (users) => {\n        console.log(\"Users subscription\");\n        if (message.body) {\n            const users = JSON.parse(message.body).users;\n            setAllUsers(users);\n            console.log(users);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onAllChatsReceived = (chats) => {\n        console.log(\"Users subscription\");\n        if (message.body) {\n            console.log(JSON.parse(message.body))\n            const users = JSON.parse(message.body).users;\n            setAllUsers(users);\n            console.log(users);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onAllMessagesReceived = (messages) => {\n\n    }\n\n    const onNewMessageReceived = (message) => {\n\n    }\n\n    const onTestReceived = (payload) => {\n        console.log(\"test received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onMessagesReceived = (payload) => {\n        console.log(\"messages received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onChatsReceived = (payload) => {\n        console.log(\"chats received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onUsersReceived = (payload) => {\n        console.log(\"users received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n\n\n    return (\n        <div className=\"messenger\">\n\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            <div className=\"scrollable sidebar\">\n              <ConversationList allUsers={allUsers}/>\n            </div>\n\n            <div className=\"scrollable content\">\n              <MessageList/>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}