{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allUsers = _useState2[0],\n      setAllUsers = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chats = _useState4[0],\n      setChats = _useState4[1];\n\n  var _useState5 = useState(-1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentChatId = _useState6[0],\n      setCurrentChatId = _useState6[1];\n\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    var client = new Client();\n    client.configure({\n      brokerURL: 'ws://localhost:8081/stomp',\n      onConnect: function () {\n        var _onConnect = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  console.log('onConnect');\n                  client.subscribe('/topic/public', function (message) {\n                    return onAllUsersReceived(message);\n                  });\n                  client.subscribe('/topic/chats', function (message) {\n                    return onAllChatsReceived(message);\n                  });\n                  client.subscribe('/topic/messages', function (message) {\n                    return onAllMessagesReceived(message);\n                  });\n                  client.subscribe('/topic/users', function (message) {\n                    return onAllUsersReceived(message);\n                  });\n                  _context2.next = 7;\n                  return axios.get(\"http://localhost:8081/actions/allUsers\");\n\n                case 7:\n                  _context2.next = 9;\n                  return axios.get(\"http://localhost:8081/actions/allUserChats\");\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function onConnect() {\n          return _onConnect.apply(this, arguments);\n        }\n\n        return onConnect;\n      }(),\n      // Helps during debugging, remove in production\n      debug: function debug(str) {\n        console.log(new Date(), str);\n      }\n    });\n    client.activate();\n  };\n\n  var onAllUsersReceived = function onAllUsersReceived(message) {\n    console.log(\"Users subscription response :\");\n\n    if (message.body) {\n      var users = JSON.parse(message.body);\n      setAllUsers(users);\n      console.log(users);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var onAllChatsReceived = function onAllChatsReceived(message) {\n    console.log(\"Chats subscription response :\");\n\n    if (message.body) {\n      console.log(JSON.parse(message.body));\n      var chatsResponse = Object.values(JSON.parse(message.body));\n      setChats(chatsResponse);\n\n      if (chatsResponse.length > 0) {\n        setCurrentChatId[chatsResponse];\n      }\n\n      console.log(chatsResponse);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var onAllMessagesReceived = function onAllMessagesReceived(messages) {};\n\n  var onNewMessageReceived = function onNewMessageReceived(message) {};\n\n  var onTestReceived = function onTestReceived(payload) {\n    console.log(\"test received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onMessagesReceived = function onMessagesReceived(payload) {\n    console.log(\"messages received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onChatsReceived = function onChatsReceived(payload) {\n    console.log(\"chats received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onUsersReceived = function onUsersReceived(payload) {\n    console.log(\"users received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    allUsers: allUsers,\n    chats: chats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","useState","ConversationList","MessageList","axios","w3cwebsocket","W3CWebSocket","SockJS","webstomp","Client","Messenger","props","allUsers","setAllUsers","chats","setChats","currentChatId","setCurrentChatId","connect","client","configure","brokerURL","onConnect","console","log","subscribe","message","onAllUsersReceived","onAllChatsReceived","onAllMessagesReceived","get","debug","str","Date","activate","body","users","JSON","parse","chatsResponse","Object","values","length","messages","onNewMessageReceived","onTestReceived","payload","onMessagesReceived","onChatsReceived","onUsersReceived"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs';\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    const [allUsers, setAllUsers] = useState([]);\n    const [chats, setChats] = useState([]);\n    const [currentChatId, setCurrentChatId] = useState(-1);\n\n\n    useEffect(async () => {\n        connect();\n    },[])\n\n    const connect = () => {\n\n        let client = new Client();\n\n        client.configure({\n            brokerURL: 'ws://localhost:8081/stomp',\n            onConnect: async () => {\n                console.log('onConnect');\n\n                client.subscribe('/topic/public', message => onAllUsersReceived(message));\n                client.subscribe('/topic/chats', message => onAllChatsReceived(message));\n                client.subscribe('/topic/messages', message => onAllMessagesReceived(message));\n                client.subscribe('/topic/users', message => onAllUsersReceived(message));\n\n                await axios.get(\"http://localhost:8081/actions/allUsers\");\n                await axios.get(\"http://localhost:8081/actions/allUserChats\");\n            },\n            // Helps during debugging, remove in production\n            debug: (str) => {\n                console.log(new Date(), str);\n            }\n        });\n\n        client.activate();\n    }\n\n    const onAllUsersReceived = (message) => {\n        console.log(\"Users subscription response :\");\n        if (message.body) {\n            const users = JSON.parse(message.body);\n            setAllUsers(users);\n            console.log(users);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onAllChatsReceived = (message) => {\n        console.log(\"Chats subscription response :\");\n        if (message.body) {\n            console.log(JSON.parse(message.body))\n            const chatsResponse = Object.values(JSON.parse(message.body));\n            setChats(chatsResponse);\n            if (chatsResponse.length > 0) {\n                setCurrentChatId[chatsResponse]\n            }\n            console.log(chatsResponse);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onAllMessagesReceived = (messages) => {\n\n    }\n\n    const onNewMessageReceived = (message) => {\n\n    }\n\n    const onTestReceived = (payload) => {\n        console.log(\"test received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onMessagesReceived = (payload) => {\n        console.log(\"messages received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onChatsReceived = (payload) => {\n        console.log(\"chats received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onUsersReceived = (payload) => {\n        console.log(\"users received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n\n\n    return (\n        <div className=\"messenger\">\n\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            <div className=\"scrollable sidebar\">\n              <ConversationList allUsers={allUsers} chats={chats}/>\n            </div>\n\n            <div className=\"scrollable content\">\n              <MessageList/>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}