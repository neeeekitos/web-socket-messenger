{"ast":null,"code":"var _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nvar clientSocket = new W3CWebSocket('ws://localhost:8081');\nexport default function Messenger(props) {\n  clientSocket.onopen = function (e) {\n    console.log(\"[open] WebSocket connection established\");\n  };\n\n  clientSocket.onmessage = function (event) {\n    alert(\"Data received from server: \".concat(event.data));\n  };\n\n  clientSocket.onclose = function (event) {\n    if (event.wasClean) {\n      alert(\"[close] Connection was closed properly, code=\".concat(event.code, \" cause=\").concat(event.reason));\n    } else {\n      alert('[close] Connection interrupted');\n    }\n  };\n\n  clientSocket.onerror = function (error) {\n    alert(\"[error] \".concat(error.message));\n  };\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    wsClient: clientSocket,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    wsClient: clientSocket,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","ConversationList","MessageList","w3cwebsocket","W3CWebSocket","clientSocket","Messenger","props","onopen","e","console","log","onmessage","event","alert","data","onclose","wasClean","code","reason","onerror","error","message"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAO,iBAAP;AACA,SAASC,YAAY,IAAIC,YAAzB,QAA6C,WAA7C;AAEA,IAAMC,YAAY,GAAG,IAAID,YAAJ,CAAiB,qBAAjB,CAArB;AAEA,eAAe,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;AAGrCF,EAAAA,YAAY,CAACG,MAAb,GAAsB,UAASC,CAAT,EAAY;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACH,GAFD;;AAIAN,EAAAA,YAAY,CAACO,SAAb,GAAyB,UAASC,KAAT,EAAgB;AACrCC,IAAAA,KAAK,sCAA+BD,KAAK,CAACE,IAArC,EAAL;AACH,GAFD;;AAIAV,EAAAA,YAAY,CAACW,OAAb,GAAuB,UAASH,KAAT,EAAgB;AACnC,QAAIA,KAAK,CAACI,QAAV,EAAoB;AAChBH,MAAAA,KAAK,wDAAiDD,KAAK,CAACK,IAAvD,oBAAqEL,KAAK,CAACM,MAA3E,EAAL;AACH,KAFD,MAEO;AAEHL,MAAAA,KAAK,CAAC,gCAAD,CAAL;AACH;AACJ,GAPD;;AASAT,EAAAA,YAAY,CAACe,OAAb,GAAuB,UAASC,KAAT,EAAgB;AACnCP,IAAAA,KAAK,mBAAYO,KAAK,CAACC,OAAlB,EAAL;AACH,GAFD;;AAIA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEjB,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArBF,EAyBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEA,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzBF,CADF;AA+BH","sourcesContent":["import React from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\n\nconst clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n\n    clientSocket.onopen = function(e) {\n        console.log(\"[open] WebSocket connection established\");\n    };\n\n    clientSocket.onmessage = function(event) {\n        alert(`Data received from server: ${event.data}`);\n    };\n\n    clientSocket.onclose = function(event) {\n        if (event.wasClean) {\n            alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n        } else {\n\n            alert('[close] Connection interrupted');\n        }\n    };\n\n    clientSocket.onerror = function(error) {\n        alert(`[error] ${error.message}`);\n    };\n\n    return (\n      <div className=\"messenger\">\n\n          {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable sidebar\">\n          <ConversationList wsClient={clientSocket}/>\n        </div>\n\n        <div className=\"scrollable content\">\n          <MessageList wsClient={clientSocket}/>\n        </div>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}