{"ast":null,"code":"import _classCallCheck from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BYTE } from './byte';\n/**\n * Frame class represents a STOMP frame.\n *\n * @internal\n */\n\nexport var FrameImpl =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Frame constructor. `command`, `headers` and `body` are available as properties.\n   *\n   * @internal\n   */\n  function FrameImpl(params) {\n    _classCallCheck(this, FrameImpl);\n\n    var command = params.command,\n        headers = params.headers,\n        body = params.body,\n        binaryBody = params.binaryBody,\n        escapeHeaderValues = params.escapeHeaderValues,\n        skipContentLengthHeader = params.skipContentLengthHeader;\n    this.command = command;\n    this.headers = Object.assign({}, headers || {});\n\n    if (binaryBody) {\n      this._binaryBody = binaryBody;\n      this.isBinaryBody = true;\n    } else {\n      this._body = body || '';\n      this.isBinaryBody = false;\n    }\n\n    this.escapeHeaderValues = escapeHeaderValues || false;\n    this.skipContentLengthHeader = skipContentLengthHeader || false;\n  }\n  /**\n   * body of the frame\n   */\n\n\n  _createClass(FrameImpl, [{\n    key: \"toString\",\n\n    /**\n     * @internal\n     */\n    value: function toString() {\n      return this.serializeCmdAndHeaders();\n    }\n    /**\n     * serialize this Frame in a format suitable to be passed to WebSocket.\n     * If the body is string the output will be string.\n     * If the body is binary (i.e. of type Unit8Array) it will be serialized to ArrayBuffer.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var cmdAndHeaders = this.serializeCmdAndHeaders();\n\n      if (this.isBinaryBody) {\n        return FrameImpl.toUnit8Array(cmdAndHeaders, this._binaryBody).buffer;\n      } else {\n        return cmdAndHeaders + this._body + BYTE.NULL;\n      }\n    }\n  }, {\n    key: \"serializeCmdAndHeaders\",\n    value: function serializeCmdAndHeaders() {\n      var lines = [this.command];\n\n      if (this.skipContentLengthHeader) {\n        delete this.headers['content-length'];\n      }\n\n      var _arr = Object.keys(this.headers || {});\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var name = _arr[_i];\n        var value = this.headers[name];\n\n        if (this.escapeHeaderValues && this.command !== 'CONNECT' && this.command !== 'CONNECTED') {\n          lines.push(\"\".concat(name, \":\").concat(FrameImpl.hdrValueEscape(\"\".concat(value))));\n        } else {\n          lines.push(\"\".concat(name, \":\").concat(value));\n        }\n      }\n\n      if (this.isBinaryBody || !this.isBodyEmpty() && !this.skipContentLengthHeader) {\n        lines.push(\"content-length:\".concat(this.bodyLength()));\n      }\n\n      return lines.join(BYTE.LF) + BYTE.LF + BYTE.LF;\n    }\n  }, {\n    key: \"isBodyEmpty\",\n    value: function isBodyEmpty() {\n      return this.bodyLength() === 0;\n    }\n  }, {\n    key: \"bodyLength\",\n    value: function bodyLength() {\n      var binaryBody = this.binaryBody;\n      return binaryBody ? binaryBody.length : 0;\n    }\n    /**\n     * Compute the size of a UTF-8 string by counting its number of bytes\n     * (and not the number of characters composing the string)\n     */\n\n  }, {\n    key: \"body\",\n    get: function get() {\n      if (!this._body && this.isBinaryBody) {\n        this._body = new TextDecoder().decode(this._binaryBody);\n      }\n\n      return this._body;\n    }\n    /**\n     * body as Uint8Array\n     */\n\n  }, {\n    key: \"binaryBody\",\n    get: function get() {\n      if (!this._binaryBody && !this.isBinaryBody) {\n        this._binaryBody = new TextEncoder().encode(this._body);\n      }\n\n      return this._binaryBody;\n    }\n    /**\n     * deserialize a STOMP Frame from raw data.\n     *\n     * @internal\n     */\n\n  }], [{\n    key: \"fromRawFrame\",\n    value: function fromRawFrame(rawFrame, escapeHeaderValues) {\n      var headers = {};\n\n      var trim = function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n      }; // In case of repeated headers, as per standards, first value need to be used\n\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = rawFrame.headers.reverse()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var header = _step.value;\n          var idx = header.indexOf(':');\n          var key = trim(header[0]);\n          var value = trim(header[1]);\n\n          if (escapeHeaderValues && rawFrame.command !== 'CONNECT' && rawFrame.command !== 'CONNECTED') {\n            value = FrameImpl.hdrValueUnEscape(value);\n          }\n\n          headers[key] = value;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return new FrameImpl({\n        command: rawFrame.command,\n        headers: headers,\n        binaryBody: rawFrame.binaryBody,\n        escapeHeaderValues: escapeHeaderValues\n      });\n    }\n  }, {\n    key: \"sizeOfUTF8\",\n    value: function sizeOfUTF8(s) {\n      return s ? new TextEncoder().encode(s).length : 0;\n    }\n  }, {\n    key: \"toUnit8Array\",\n    value: function toUnit8Array(cmdAndHeaders, binaryBody) {\n      var uint8CmdAndHeaders = new TextEncoder().encode(cmdAndHeaders);\n      var nullTerminator = new Uint8Array([0]);\n      var uint8Frame = new Uint8Array(uint8CmdAndHeaders.length + binaryBody.length + nullTerminator.length);\n      uint8Frame.set(uint8CmdAndHeaders);\n      uint8Frame.set(binaryBody, uint8CmdAndHeaders.length);\n      uint8Frame.set(nullTerminator, uint8CmdAndHeaders.length + binaryBody.length);\n      return uint8Frame;\n    }\n    /**\n     * Serialize a STOMP frame as per STOMP standards, suitable to be sent to the STOMP broker.\n     *\n     * @internal\n     */\n\n  }, {\n    key: \"marshall\",\n    value: function marshall(params) {\n      var frame = new FrameImpl(params);\n      return frame.serialize();\n    }\n    /**\n     *  Escape header values\n     */\n\n  }, {\n    key: \"hdrValueEscape\",\n    value: function hdrValueEscape(str) {\n      return str.replace(/\\\\/g, '\\\\\\\\').replace(/\\r/g, '\\\\r').replace(/\\n/g, '\\\\n').replace(/:/g, '\\\\c');\n    }\n    /**\n     * UnEscape header values\n     */\n\n  }, {\n    key: \"hdrValueUnEscape\",\n    value: function hdrValueUnEscape(str) {\n      return str.replace(/\\\\r/g, '\\r').replace(/\\\\n/g, '\\n').replace(/\\\\c/g, ':').replace(/\\\\\\\\/g, '\\\\');\n    }\n  }]);\n\n  return FrameImpl;\n}();","map":null,"metadata":{},"sourceType":"module"}