{"ast":null,"code":"import _toConsumableArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect, useState } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { Client } from '@stomp/stompjs';\nimport { Button } from \"react-bootstrap\";\nimport styles from \"../ConversationList/addchat.module.css\";\nexport default function Messenger(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allUsers = _useState2[0],\n      setAllUsers = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chats = _useState4[0],\n      setChats = _useState4[1];\n\n  var _useState5 = useState(-1),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentChatId = _useState6[0],\n      setCurrentChatId = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      messages = _useState8[0],\n      setMessages = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      authenticated = _useState10[0],\n      setAuth = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      username = _useState12[0],\n      setUsername = _useState12[1];\n\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    var client = new Client();\n    client.configure({\n      brokerURL: 'ws://localhost:8081/stomp',\n      onConnect: function () {\n        var _onConnect = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  console.log('onConnect');\n                  client.subscribe('/topic/public', function (message) {\n                    return onAllUsersReceived(message);\n                  });\n                  client.subscribe('/topic/chats', function (message) {\n                    return onAllChatsReceived(message);\n                  });\n                  client.subscribe('/topic/messages', function (message) {\n                    return onAllMessagesReceived(message);\n                  });\n                  client.subscribe('/topic/users', function (message) {\n                    return onAllUsersReceived(message);\n                  });\n                  client.subscribe('/topic/newMessage', function (message) {\n                    return onNewMessageReceived(message);\n                  });\n                  _context2.next = 8;\n                  return isAuthenticated();\n\n                case 8:\n                  _context2.next = 10;\n                  return afterAuth();\n\n                case 10:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function onConnect() {\n          return _onConnect.apply(this, arguments);\n        }\n\n        return onConnect;\n      }(),\n      // Helps during debugging, remove in production\n      debug: function debug(str) {\n        console.log(new Date(), str);\n      }\n    });\n    client.activate();\n  };\n\n  var getMessagesByChatId = function getMessagesByChatId(chatId) {\n    axios.post(\"http://localhost:8081/actions/changeCurrentChat/\".concat(chatId), null, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      responseType: 'text'\n    }).then(function (response) {\n      console.log(response);\n      axios.get(\"http://localhost:8081/messages/getMessagesByChatId?chatId=\".concat(chatId)).then(console.log);\n    });\n  };\n\n  var onAllUsersReceived = function onAllUsersReceived(message) {\n    console.log(\"Users subscription response :\");\n\n    if (message.body) {\n      var users = JSON.parse(message.body);\n      setAllUsers(users);\n      console.log(users);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var isAuthenticated =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get(\"http://localhost:8081/auth/isAuthenticated\");\n\n            case 2:\n              response = _context3.sent;\n              console.log(response.data ? \"User is authenticated\" : \"User is not authenticated\");\n              return _context3.abrupt(\"return\", response.data);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function isAuthenticated() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var authenticate =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return axios.post('http://localhost:8081/auth/authenticate', username, {\n                headers: {\n                  'Content-Type': 'text/plain'\n                }\n              });\n\n            case 2:\n              response = _context4.sent;\n              console.log(response.data, response.status);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function authenticate() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var afterAuth =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return axios.get(\"http://localhost:8081/actions/allUsers\");\n\n            case 2:\n              _context5.next = 4;\n              return axios.get(\"http://localhost:8081/actions/allUserChats\");\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function afterAuth() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var onAllChatsReceived = function onAllChatsReceived(message) {\n    console.log(\"Chats subscription response :\");\n\n    if (message.body) {\n      console.log(JSON.parse(message.body));\n      var chatsResponse = Object.values(JSON.parse(message.body));\n      setChats(chatsResponse);\n\n      if (chatsResponse.length > 0) {\n        setCurrentChatId(chatsResponse[0].chatId); // axios.get(`http://localhost:8081/messages/getMessagesByChatId?chatId=${currentChatId}`).then();\n      }\n\n      console.log(chatsResponse);\n    } else {\n      console.log(\"got empty message\");\n    }\n  };\n\n  var onAllMessagesReceived =\n  /*#__PURE__*/\n  function () {\n    var _ref5 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(message) {\n      var msgsResponse, orderedMessages;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              console.log(\"Messages subscription response :\");\n\n              if (message.body) {\n                msgsResponse = Object.values(JSON.parse(message.body));\n                orderedMessages = msgsResponse.reverse().map(function (msg) {\n                  return processMessage(msg);\n                });\n                setMessages(orderedMessages);\n                console.log(msgsResponse);\n              } else {\n                console.log(\"got empty message\");\n              }\n\n            case 2:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    return function onAllMessagesReceived(_x) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  var onNewMessageReceived =\n  /*#__PURE__*/\n  function () {\n    var _ref6 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(message) {\n      var msgResponse;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              console.log(\"New message subscription response :\");\n\n              if (message.body) {\n                // console.log(JSON.parse(message.body))\n                msgResponse = Object.values(JSON.parse(message.body))[5];\n                console.log(\"messages : \" + messages);\n                setMessages(function (messages) {\n                  return [].concat(_toConsumableArray(messages), [processMessage(msgResponse)]);\n                });\n                console.log(JSON.stringify(messages));\n              } else {\n                console.log(\"got empty message\");\n              }\n\n            case 2:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    return function onNewMessageReceived(_x2) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  var processMessage = function processMessage(message) {\n    console.log(\"puto :\" + message);\n    return {\n      id: message.id,\n      author: message.sender.username,\n      message: message.text,\n      timestamp: new Date(message.time)\n    };\n  };\n\n  var onTestReceived = function onTestReceived(payload) {\n    console.log(\"test received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var sendMessage = function sendMessage(message) {\n    console.log(\"loooool : \" + message);\n    axios.post(\"http://localhost:8081/messages/sendMessage\", message, {\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      responseType: 'text'\n    }).then(console.log);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    getMessagesByChatId: getMessagesByChatId,\n    allUsers: allUsers,\n    chats: chats,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    hidden: !authenticated,\n    className: \"authenticationPopupBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"authenticationBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Authentication\"), React.createElement(\"input\", {\n    type: \"text\",\n    list: \"data\" // link to datalist below\n    ,\n    className: \"conversation-search-input\",\n    placeholder: \"Your username\",\n    value: username,\n    onChange: function onChange(e) {\n      return setUsername(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: \"btn\",\n    onClick: function onClick() {\n      return authenticate();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }, \"Login\"))), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    sendMessage: sendMessage,\n    messagesProp: messages,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","useState","ConversationList","MessageList","axios","Client","Button","styles","Messenger","props","allUsers","setAllUsers","chats","setChats","currentChatId","setCurrentChatId","messages","setMessages","authenticated","setAuth","username","setUsername","connect","client","configure","brokerURL","onConnect","console","log","subscribe","message","onAllUsersReceived","onAllChatsReceived","onAllMessagesReceived","onNewMessageReceived","isAuthenticated","afterAuth","debug","str","Date","activate","getMessagesByChatId","chatId","post","headers","responseType","then","response","get","body","users","JSON","parse","data","authenticate","status","chatsResponse","Object","values","length","msgsResponse","orderedMessages","reverse","map","msg","processMessage","msgResponse","stringify","id","author","sender","text","timestamp","time","onTestReceived","payload","sendMessage","e","target","value"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport axios from \"axios\";\nimport { Client } from '@stomp/stompjs';\nimport {Button} from \"react-bootstrap\";\nimport styles from \"../ConversationList/addchat.module.css\";\n\nexport default function Messenger(props) {\n\n    const [allUsers, setAllUsers] = useState([]);\n    const [chats, setChats] = useState([]);\n    const [currentChatId, setCurrentChatId] = useState(-1);\n    const [messages, setMessages] = useState([]);\n    const [authenticated, setAuth] = useState(false);\n    const [username, setUsername] = useState(\"\");\n\n\n    useEffect(async () => {\n        connect();\n    },[])\n\n    const connect = () => {\n\n        let client = new Client();\n\n        client.configure({\n            brokerURL: 'ws://localhost:8081/stomp',\n            onConnect: async () => {\n                console.log('onConnect');\n\n                client.subscribe('/topic/public', message => onAllUsersReceived(message));\n                client.subscribe('/topic/chats', message => onAllChatsReceived(message));\n                client.subscribe('/topic/messages', message => onAllMessagesReceived(message));\n                client.subscribe('/topic/users', message => onAllUsersReceived(message));\n                client.subscribe('/topic/newMessage', message => onNewMessageReceived(message));\n                await isAuthenticated();\n                await afterAuth(); // fetch users and chats\n            },\n            // Helps during debugging, remove in production\n            debug: (str) => {\n                console.log(new Date(), str);\n            }\n        });\n\n        client.activate();\n    }\n\n    const getMessagesByChatId = (chatId) => {\n        axios.post(`http://localhost:8081/actions/changeCurrentChat/${chatId}`, null, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            responseType: 'text'\n        }).then(response => {\n            console.log(response);\n            axios.get(`http://localhost:8081/messages/getMessagesByChatId?chatId=${chatId}`).then(console.log);\n\n        });\n    }\n\n    const onAllUsersReceived = (message) => {\n        console.log(\"Users subscription response :\");\n        if (message.body) {\n            const users = JSON.parse(message.body);\n            setAllUsers(users);\n            console.log(users);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const isAuthenticated = async () => {\n        const response = await axios.get(\"http://localhost:8081/auth/isAuthenticated\");\n        console.log(response.data ? \"User is authenticated\" : \"User is not authenticated\");\n        return response.data\n    }\n\n    const authenticate = async () => {\n        const response = await axios.post('http://localhost:8081/auth/authenticate', username,\n            {\n                headers: {\n                    'Content-Type': 'text/plain',\n                }\n            });\n        console.log(response.data, response.status);\n    }\n\n    const afterAuth = async () => {\n        await axios.get(\"http://localhost:8081/actions/allUsers\");\n        await axios.get(\"http://localhost:8081/actions/allUserChats\");\n    }\n\n    const onAllChatsReceived = (message) => {\n        console.log(\"Chats subscription response :\");\n        if (message.body) {\n            console.log(JSON.parse(message.body))\n            const chatsResponse = Object.values(JSON.parse(message.body));\n            setChats(chatsResponse);\n            if (chatsResponse.length > 0) {\n                setCurrentChatId(chatsResponse[0].chatId);\n                // axios.get(`http://localhost:8081/messages/getMessagesByChatId?chatId=${currentChatId}`).then();\n            }\n            console.log(chatsResponse);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onAllMessagesReceived = async (message) => {\n        console.log(\"Messages subscription response :\");\n        if (message.body) {\n            const msgsResponse = Object.values(JSON.parse(message.body));\n            const orderedMessages = msgsResponse.reverse().map(msg => processMessage(msg));\n            setMessages(orderedMessages);\n            console.log(msgsResponse);\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const onNewMessageReceived = async (message) => {\n        console.log(\"New message subscription response :\");\n        if (message.body) {\n            // console.log(JSON.parse(message.body))\n            const msgResponse = Object.values(JSON.parse(message.body))[5];\n            console.log(\"messages : \" + messages);\n\n            setMessages(messages => [...messages, processMessage(msgResponse)]);\n            console.log(JSON.stringify(messages))\n\n        } else {\n            console.log(\"got empty message\");\n        }\n    }\n\n    const processMessage = (message) => {\n        console.log(\"puto :\" + message)\n        return {\n            id: message.id,\n            author: message.sender.username,\n            message: message.text,\n            timestamp: new Date(message.time)\n        }\n    }\n\n    const onTestReceived = (payload) => {\n        console.log(\"test received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const sendMessage = (message) => {\n        console.log(\"loooool : \"+ message)\n        axios.post(\"http://localhost:8081/messages/sendMessage\", message, {\n            headers: {\n                'Content-Type': 'text/plain'\n            },\n            responseType: 'text'\n        }).then(console.log);\n    }\n\n\n    return (\n        <div className=\"messenger\">\n\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            <div className=\"scrollable sidebar\">\n                {/*<button onClick={async () => {*/}\n                {/*    setAuth(true);*/}\n                {/*    await afterAuth();*/}\n                {/*}}>Authenticated?</button>*/}\n\n                <ConversationList getMessagesByChatId={getMessagesByChatId} allUsers={allUsers} chats={chats}/>\n            </div>\n            <div hidden={!authenticated} className=\"authenticationPopupBox\">\n                <div className=\"authenticationBox\">\n                    <h2>Authentication</h2>\n                    <input\n                        type=\"text\"\n                        list=\"data\" // link to datalist below\n                        className=\"conversation-search-input\"\n                        placeholder=\"Your username\"\n                        value={username}\n                        onChange={e => setUsername(e.target.value)}\n                    />\n                    <Button className=\"btn\" onClick={() => authenticate()}>Login</Button>\n                </div>\n            </div>\n\n            <div className=\"scrollable content\">\n              <MessageList sendMessage={sendMessage} messagesProp={messages}/>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}