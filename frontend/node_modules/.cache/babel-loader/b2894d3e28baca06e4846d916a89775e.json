{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  // let url = 'http://localhost:8081/stomp';\n  // let options = {};\n  // let sockjs = new SockJS(url, /*_reserved*/null, options);\n  // let clientStomp;\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    // let socket = new SockJS(url);\n    // clientStomp = webstomp.over(new SockJS(url, {heartbeat: false}));\n    //\n    // clientStomp.connect({}, onConnected, console.log(\"oouuups\"));\n    var client = new Client();\n    client.configure({\n      brokerURL: 'ws://localhost:8081/stomp',\n      onConnect: function onConnect() {\n        console.log('onConnect');\n        client.subscribe('/topic/public', function (message) {\n          console.log(\"from subscription\");\n\n          if (message.body) {\n            console.log(message.body.sender.username);\n          } else {\n            console.log(\"got empty message\");\n          }\n        });\n      },\n      // Helps during debugging, remove in production\n      debug: function debug(str) {\n        console.log(new Date(), str);\n      }\n    });\n    client.activate();\n  }; // const onConnected = () => {\n  //     console.log(\"onConnected\");\n  //     // Subscribe to the Public Topic\n  //     clientStomp.subscribe(\"/topic/public\", () => {\n  //         console.log('received from topic public');\n  //     });\n  //     // clientStomp.subscribe(\"/topic/messages\", onMessagesReceived);\n  //     // clientStomp.subscribe(\"/topic/chats\", onChatsReceived);\n  //     // clientStomp.subscribe(\"/topic/users\", onUsersReceived);\n  //\n  //     // Tell your username to the server\n  //     clientStomp.send(\n  //         \"/actions/test\",\n  //         {},\n  //         //\n  //         \"init\"\n  //     );\n  //\n  //     // clientStomp.send(\n  //     //     \"/actions/allUsers\",\n  //     //     {},\n  //     //     JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n  //     // );\n  //     //\n  //     // clientStomp.send(\n  //     //     \"/actions/userChats\",\n  //     //     {},\n  //     //     JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n  //     // );\n  //\n  //     // clientStomp.send(\n  //     //     \"/actions/userChats\",\n  //     //     {},\n  //     //     JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n  //     // );\n  // }\n\n\n  var onTestReceived = function onTestReceived(payload) {\n    console.log(\"test received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onMessagesReceived = function onMessagesReceived(payload) {\n    console.log(\"messages received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onChatsReceived = function onChatsReceived(payload) {\n    console.log(\"chats received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n\n  var onUsersReceived = function onUsersReceived(payload) {\n    console.log(\"users received\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n  /*  NB: Moved into App\n  sockjs.onmessage = function(e) {\n      console.log('message', e.data);\n  }; //*/\n  // sockjs.onclose = function() {\n  //     console.log('close');\n  // };\n  //\n  // clientSocket.onopen = function(e) {\n  //     console.log(\"[open] WebSocket connection established\");\n  // };\n  //\n  // clientSocket.onmessage = function(event) {\n  //     alert(`Data received from server: ${event.data}`);\n  // };\n  //\n  // clientSocket.onclose = function(event) {\n  //     if (event.wasClean) {\n  //         alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n  //     } else {\n  //\n  //         alert('[close] Connection interrupted');\n  //     }\n  // };\n  //\n  // clientSocket.onerror = function(error) {\n  //     alert(`[error] ${error.message}`);\n  // };\n\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","ConversationList","MessageList","w3cwebsocket","W3CWebSocket","SockJS","webstomp","Client","Messenger","props","connect","client","configure","brokerURL","onConnect","console","log","subscribe","message","body","sender","username","debug","str","Date","activate","onTestReceived","payload","JSON","parse","onMessagesReceived","onChatsReceived","onUsersReceived"],"mappings":"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","sourcesContent":["import React, {useEffect} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\nimport { Client } from '@stomp/stompjs';\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    // let url = 'http://localhost:8081/stomp';\n    // let options = {};\n    // let sockjs = new SockJS(url, /*_reserved*/null, options);\n    // let clientStomp;\n\n    useEffect(async () => {\n        connect();\n    },[])\n\n    const connect = () => {\n\n        // let socket = new SockJS(url);\n        // clientStomp = webstomp.over(new SockJS(url, {heartbeat: false}));\n        //\n        // clientStomp.connect({}, onConnected, console.log(\"oouuups\"));\n        let client = new Client();\n\n        client.configure({\n            brokerURL: 'ws://localhost:8081/stomp',\n            onConnect: () => {\n                console.log('onConnect');\n\n                client.subscribe('/topic/public', message => {\n                    console.log(\"from subscription\");\n                    if (message.body) {\n                        console.log(message.body.sender.username);\n                    } else {\n                        console.log(\"got empty message\");\n                    }\n                });\n\n            },\n            // Helps during debugging, remove in production\n            debug: (str) => {\n                console.log(new Date(), str);\n            }\n        });\n\n        client.activate();\n    }\n\n    // const onConnected = () => {\n    //     console.log(\"onConnected\");\n    //     // Subscribe to the Public Topic\n    //     clientStomp.subscribe(\"/topic/public\", () => {\n    //         console.log('received from topic public');\n    //     });\n    //     // clientStomp.subscribe(\"/topic/messages\", onMessagesReceived);\n    //     // clientStomp.subscribe(\"/topic/chats\", onChatsReceived);\n    //     // clientStomp.subscribe(\"/topic/users\", onUsersReceived);\n    //\n    //     // Tell your username to the server\n    //     clientStomp.send(\n    //         \"/actions/test\",\n    //         {},\n    //         //\n    //         \"init\"\n    //     );\n    //\n    //     // clientStomp.send(\n    //     //     \"/actions/allUsers\",\n    //     //     {},\n    //     //     JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n    //     // );\n    //     //\n    //     // clientStomp.send(\n    //     //     \"/actions/userChats\",\n    //     //     {},\n    //     //     JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n    //     // );\n    //\n    //     // clientStomp.send(\n    //     //     \"/actions/userChats\",\n    //     //     {},\n    //     //     JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n    //     // );\n    // }\n\n    const onTestReceived = (payload) => {\n        console.log(\"test received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onMessagesReceived = (payload) => {\n        console.log(\"messages received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onChatsReceived = (payload) => {\n        console.log(\"chats received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n    const onUsersReceived = (payload) => {\n        console.log(\"users received\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n\n    /*  NB: Moved into App\n    sockjs.onmessage = function(e) {\n        console.log('message', e.data);\n    }; //*/\n    // sockjs.onclose = function() {\n    //     console.log('close');\n    // };\n\n    //\n    // clientSocket.onopen = function(e) {\n    //     console.log(\"[open] WebSocket connection established\");\n    // };\n    //\n    // clientSocket.onmessage = function(event) {\n    //     alert(`Data received from server: ${event.data}`);\n    // };\n    //\n    // clientSocket.onclose = function(event) {\n    //     if (event.wasClean) {\n    //         alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n    //     } else {\n    //\n    //         alert('[close] Connection interrupted');\n    //     }\n    // };\n    //\n    // clientSocket.onerror = function(error) {\n    //     alert(`[error] ${error.message}`);\n    // };\n\n    return (\n        <div className=\"messenger\">\n\n            {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n            {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n            {/*<div className=\"scrollable sidebar\">*/}\n            {/*  <ConversationList wsClient={sockjs}/>*/}\n            {/*</div>*/}\n\n            {/*<div className=\"scrollable content\">*/}\n            {/*  <MessageList wsClient={sockjs}/>*/}\n            {/*</div>*/}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}