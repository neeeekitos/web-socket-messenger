{"ast":null,"code":"import _classCallCheck from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @internal\n */\nvar NULL = 0;\n/**\n * @internal\n */\n\nvar LF = 10;\n/**\n * @internal\n */\n\nvar CR = 13;\n/**\n * @internal\n */\n\nvar COLON = 58;\n/**\n * This is an evented, rec descent parser.\n * A stream of Octets can be passed and whenever it recognizes\n * a complete Frame or an incoming ping it will invoke the registered callbacks.\n *\n * All incoming Octets are fed into _onByte function.\n * Depending on current state the _onByte function keeps changing.\n * Depending on the state it keeps accumulating into _token and _results.\n * State is indicated by current value of _onByte, all states are named as _collect.\n *\n * STOMP standards https://stomp.github.io/stomp-specification-1.2.html\n * imply that all lengths are considered in bytes (instead of string lengths).\n * So, before actual parsing, if the incoming data is String it is converted to Octets.\n * This allows faithful implementation of the protocol and allows NULL Octets to be present in the body.\n *\n * There is no peek function on the incoming data.\n * When a state change occurs based on an Octet without consuming the Octet,\n * the Octet, after state change, is fed again (_reinjectByte).\n * This became possible as the state change can be determined by inspecting just one Octet.\n *\n * There are two modes to collect the body, if content-length header is there then it by counting Octets\n * otherwise it is determined by NULL terminator.\n *\n * Following the standards, the command and headers are converted to Strings\n * and the body is returned as Octets.\n * Headers are returned as an array and not as Hash - to allow multiple occurrence of an header.\n *\n * This parser does not use Regular Expressions as that can only operate on Strings.\n *\n * It handles if multiple STOMP frames are given as one chunk, a frame is split into multiple chunks, or\n * any combination there of. The parser remembers its state (any partial frame) and continues when a new chunk\n * is pushed.\n *\n * Typically the higher level function will convert headers to Hash, handle unescaping of header values\n * (which is protocol version specific), and convert body to text.\n *\n * Check the parser.spec.js to understand cases that this parser is supposed to handle.\n *\n * Part of `@stomp/stompjs`.\n *\n * @internal\n */\n\nexport var Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(onFrame, onIncomingPing) {\n    _classCallCheck(this, Parser);\n\n    this.onFrame = onFrame;\n    this.onIncomingPing = onIncomingPing;\n    this._encoder = new TextEncoder();\n    this._decoder = new TextDecoder();\n    this._token = [];\n\n    this._initState();\n  }\n\n  _createClass(Parser, [{\n    key: \"parseChunk\",\n    value: function parseChunk(segment) {\n      var appendMissingNULLonIncoming = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var chunk;\n\n      if (segment instanceof ArrayBuffer) {\n        chunk = new Uint8Array(segment);\n      } else {\n        chunk = this._encoder.encode(segment);\n      } // See https://github.com/stomp-js/stompjs/issues/89\n      // Remove when underlying issue is fixed.\n      //\n      // Send a NULL byte, if the last byte of a Text frame was not NULL.F\n\n\n      if (appendMissingNULLonIncoming && chunk[chunk.length - 1] !== 0) {\n        var chunkWithNull = new Uint8Array(chunk.length + 1);\n        chunkWithNull.set(chunk, 0);\n        chunkWithNull[chunk.length] = 0;\n        chunk = chunkWithNull;\n      } // tslint:disable-next-line:prefer-for-of\n\n\n      for (var i = 0; i < chunk.length; i++) {\n        var byte = chunk[i];\n\n        this._onByte(byte);\n      }\n    } // The following implements a simple Rec Descent Parser.\n    // The grammar is simple and just one byte tells what should be the next state\n\n  }, {\n    key: \"_collectFrame\",\n    value: function _collectFrame(byte) {\n      if (byte === NULL) {\n        // Ignore\n        return;\n      }\n\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n\n      if (byte === LF) {\n        // Incoming Ping\n        this.onIncomingPing();\n        return;\n      }\n\n      this._onByte = this._collectCommand;\n\n      this._reinjectByte(byte);\n    }\n  }, {\n    key: \"_collectCommand\",\n    value: function _collectCommand(byte) {\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n\n      if (byte === LF) {\n        this._results.command = this._consumeTokenAsUTF8();\n        this._onByte = this._collectHeaders;\n        return;\n      }\n\n      this._consumeByte(byte);\n    }\n  }, {\n    key: \"_collectHeaders\",\n    value: function _collectHeaders(byte) {\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n\n      if (byte === LF) {\n        this._setupCollectBody();\n\n        return;\n      }\n\n      this._onByte = this._collectHeaderKey;\n\n      this._reinjectByte(byte);\n    }\n  }, {\n    key: \"_reinjectByte\",\n    value: function _reinjectByte(byte) {\n      this._onByte(byte);\n    }\n  }, {\n    key: \"_collectHeaderKey\",\n    value: function _collectHeaderKey(byte) {\n      if (byte === COLON) {\n        this._headerKey = this._consumeTokenAsUTF8();\n        this._onByte = this._collectHeaderValue;\n        return;\n      }\n\n      this._consumeByte(byte);\n    }\n  }, {\n    key: \"_collectHeaderValue\",\n    value: function _collectHeaderValue(byte) {\n      if (byte === CR) {\n        // Ignore CR\n        return;\n      }\n\n      if (byte === LF) {\n        this._results.headers.push([this._headerKey, this._consumeTokenAsUTF8()]);\n\n        this._headerKey = undefined;\n        this._onByte = this._collectHeaders;\n        return;\n      }\n\n      this._consumeByte(byte);\n    }\n  }, {\n    key: \"_setupCollectBody\",\n    value: function _setupCollectBody() {\n      var contentLengthHeader = this._results.headers.filter(function (header) {\n        return header[0] === 'content-length';\n      })[0];\n\n      if (contentLengthHeader) {\n        this._bodyBytesRemaining = parseInt(contentLengthHeader[1], 10);\n        this._onByte = this._collectBodyFixedSize;\n      } else {\n        this._onByte = this._collectBodyNullTerminated;\n      }\n    }\n  }, {\n    key: \"_collectBodyNullTerminated\",\n    value: function _collectBodyNullTerminated(byte) {\n      if (byte === NULL) {\n        this._retrievedBody();\n\n        return;\n      }\n\n      this._consumeByte(byte);\n    }\n  }, {\n    key: \"_collectBodyFixedSize\",\n    value: function _collectBodyFixedSize(byte) {\n      // It is post decrement, so that we discard the trailing NULL octet\n      if (this._bodyBytesRemaining-- === 0) {\n        this._retrievedBody();\n\n        return;\n      }\n\n      this._consumeByte(byte);\n    }\n  }, {\n    key: \"_retrievedBody\",\n    value: function _retrievedBody() {\n      this._results.binaryBody = this._consumeTokenAsRaw();\n      this.onFrame(this._results);\n\n      this._initState();\n    } // Rec Descent Parser helpers\n\n  }, {\n    key: \"_consumeByte\",\n    value: function _consumeByte(byte) {\n      this._token.push(byte);\n    }\n  }, {\n    key: \"_consumeTokenAsUTF8\",\n    value: function _consumeTokenAsUTF8() {\n      return this._decoder.decode(this._consumeTokenAsRaw());\n    }\n  }, {\n    key: \"_consumeTokenAsRaw\",\n    value: function _consumeTokenAsRaw() {\n      var rawResult = new Uint8Array(this._token);\n      this._token = [];\n      return rawResult;\n    }\n  }, {\n    key: \"_initState\",\n    value: function _initState() {\n      this._results = {\n        command: undefined,\n        headers: [],\n        binaryBody: undefined\n      };\n      this._token = [];\n      this._headerKey = undefined;\n      this._onByte = this._collectFrame;\n    }\n  }]);\n\n  return Parser;\n}();","map":null,"metadata":{},"sourceType":"module"}