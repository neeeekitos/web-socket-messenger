{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js\";\nimport React, { useEffect } from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client'; // const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n  var url = 'http://localhost:8081/actions';\n  var options = {};\n  var sockjs = new SockJS(url,\n  /*_reserved*/\n  null, options);\n  var webstomp;\n  useEffect(\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            connect();\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  })), []);\n\n  var connect = function connect() {\n    var socket = new SockJS(url);\n    webstomp = webstomp.over(socket);\n    webstomp.connect({}, onConnected, console.log(\"oouuups\"));\n  };\n\n  var onConnected = function onConnected() {\n    console.log(\"onConnected\"); // Subscribe to the Public Topic\n\n    webstomp.subscribe(\"/actions/messages\", onMessageReceived); // Tell your username to the server\n\n    webstomp.send(\"/actions/test\", {}, JSON.stringify({\n      sender: \"Ali\",\n      type: \"JOIN\"\n    }));\n  };\n\n  var onMessageReceived = function onMessageReceived(payload) {\n    console.log(\"onMessageReceived\");\n    var message = JSON.parse(payload.body);\n    console.log(message);\n  };\n  /*  NB: Moved into App\n  sockjs.onmessage = function(e) {\n      console.log('message', e.data);\n  }; //*/\n\n\n  sockjs.onclose = function () {\n    console.log('close');\n  }; //\n  // clientSocket.onopen = function(e) {\n  //     console.log(\"[open] WebSocket connection established\");\n  // };\n  //\n  // clientSocket.onmessage = function(event) {\n  //     alert(`Data received from server: ${event.data}`);\n  // };\n  //\n  // clientSocket.onclose = function(event) {\n  //     if (event.wasClean) {\n  //         alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n  //     } else {\n  //\n  //         alert('[close] Connection interrupted');\n  //     }\n  // };\n  //\n  // clientSocket.onerror = function(error) {\n  //     alert(`[error] ${error.message}`);\n  // };\n\n\n  return React.createElement(\"div\", {\n    className: \"messenger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"scrollable sidebar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(ConversationList, {\n    wsClient: sockjs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"scrollable content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(MessageList, {\n    wsClient: sockjs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  })));\n}","map":{"version":3,"sources":["/Users/nikita/Projects/insa/web-socket-messenger/frontend/src/components/Messenger/index.js"],"names":["React","useEffect","ConversationList","MessageList","w3cwebsocket","W3CWebSocket","SockJS","webstomp","Messenger","props","url","options","sockjs","connect","socket","over","onConnected","console","log","subscribe","onMessageReceived","send","JSON","stringify","sender","type","payload","message","parse","body","onclose"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAO,iBAAP;AACA,SAASC,YAAY,IAAIC,YAAzB,QAA6C,WAA7C;AACA,OAAO,KAAKC,MAAZ,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,iBAArB,C,CACA;;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAErC,MAAIC,GAAG,GAAG,+BAAV;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG,IAAIN,MAAJ,CAAWI,GAAX;AAAgB;AAAa,MAA7B,EAAmCC,OAAnC,CAAb;AACA,MAAIJ,QAAJ;AAEAN,EAAAA,SAAS;AAAA;AAAA;AAAA;AAAA,2BAAC;AAAA;AAAA;AAAA;AAAA;AACNY,YAAAA,OAAO;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAEP,EAFO,CAAT;;AAIA,MAAMA,OAAO,GAAG,SAAVA,OAAU,GAAM;AAElB,QAAIC,MAAM,GAAG,IAAIR,MAAJ,CAAWI,GAAX,CAAb;AACAH,IAAAA,QAAQ,GAAGA,QAAQ,CAACQ,IAAT,CAAcD,MAAd,CAAX;AAEAP,IAAAA,QAAQ,CAACM,OAAT,CAAiB,EAAjB,EAAqBG,WAArB,EAAkCC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAlC;AACH,GAND;;AAQA,MAAMF,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADsB,CAEtB;;AACAX,IAAAA,QAAQ,CAACY,SAAT,CAAmB,mBAAnB,EAAwCC,iBAAxC,EAHsB,CAKtB;;AACAb,IAAAA,QAAQ,CAACc,IAAT,CACI,eADJ,EAEI,EAFJ,EAGIC,IAAI,CAACC,SAAL,CAAe;AAAEC,MAAAA,MAAM,EAAE,KAAV;AAAiBC,MAAAA,IAAI,EAAE;AAAvB,KAAf,CAHJ;AAKH,GAXD;;AAaA,MAAML,iBAAiB,GAAG,SAApBA,iBAAoB,CAACM,OAAD,EAAa;AACnCT,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAIS,OAAO,GAAGL,IAAI,CAACM,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAd;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYS,OAAZ;AACH,GAJD;AAOA;;;;;;AAIAf,EAAAA,MAAM,CAACkB,OAAP,GAAiB,YAAW;AACxBb,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH,GAFD,CA3CqC,CA+CrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEN,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CArBF,EAyBE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAEA,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzBF,CADF;AA+BH","sourcesContent":["import React, {useEffect} from 'react';\nimport ConversationList from '../ConversationList';\nimport MessageList from '../MessageList';\nimport './Messenger.css';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport * as SockJS from 'sockjs-client';\nimport webstomp from 'webstomp-client';\n// const clientSocket = new W3CWebSocket('ws://localhost:8081');\n\nexport default function Messenger(props) {\n\n    let url = 'http://localhost:8081/actions';\n    let options = {};\n    let sockjs = new SockJS(url, /*_reserved*/null, options);\n    let webstomp;\n\n    useEffect(async () => {\n        connect();\n    },[])\n\n    const connect = () => {\n\n        let socket = new SockJS(url);\n        webstomp = webstomp.over(socket);\n\n        webstomp.connect({}, onConnected, console.log(\"oouuups\"));\n    }\n\n    const onConnected = () => {\n        console.log(\"onConnected\");\n        // Subscribe to the Public Topic\n        webstomp.subscribe(\"/actions/messages\", onMessageReceived);\n\n        // Tell your username to the server\n        webstomp.send(\n            \"/actions/test\",\n            {},\n            JSON.stringify({ sender: \"Ali\", type: \"JOIN\" })\n        );\n    }\n\n    const onMessageReceived = (payload) => {\n        console.log(\"onMessageReceived\");\n        var message = JSON.parse(payload.body);\n        console.log(message);\n    }\n\n\n    /*  NB: Moved into App\n    sockjs.onmessage = function(e) {\n        console.log('message', e.data);\n    }; //*/\n    sockjs.onclose = function() {\n        console.log('close');\n    };\n\n    //\n    // clientSocket.onopen = function(e) {\n    //     console.log(\"[open] WebSocket connection established\");\n    // };\n    //\n    // clientSocket.onmessage = function(event) {\n    //     alert(`Data received from server: ${event.data}`);\n    // };\n    //\n    // clientSocket.onclose = function(event) {\n    //     if (event.wasClean) {\n    //         alert(`[close] Connection was closed properly, code=${event.code} cause=${event.reason}`);\n    //     } else {\n    //\n    //         alert('[close] Connection interrupted');\n    //     }\n    // };\n    //\n    // clientSocket.onerror = function(error) {\n    //     alert(`[error] ${error.message}`);\n    // };\n\n    return (\n      <div className=\"messenger\">\n\n          {/* <Toolbar\n          title=\"Messenger\"\n          leftItems={[\n            <ToolbarButton key=\"cog\" icon=\"ion-ios-cog\" />\n          ]}\n          rightItems={[\n            <ToolbarButton key=\"add\" icon=\"ion-ios-add-circle-outline\" />\n          ]}\n        /> */}\n\n        {/* <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />\n          ]}\n        /> */}\n\n        <div className=\"scrollable sidebar\">\n          <ConversationList wsClient={sockjs}/>\n        </div>\n\n        <div className=\"scrollable content\">\n          <MessageList wsClient={sockjs}/>\n        </div>\n      </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}